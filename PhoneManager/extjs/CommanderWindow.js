/*
 * File: CommanderWindow.js
 * Date: Sat Feb 04 2012 17:53:06 GMT+0100 (CET)
 * 
 * This file was generated by Ext Designer version 1.1.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

CommanderWindow = Ext.extend(CommanderWindowUi, {
    asteriskManager: null,
    
    initComponent: function() {
        CommanderWindow.superclass.initComponent.call(this);
        
        // Registriere Listener auf UI-Komponenten
        this.actionCombo.on('select', this.selectAction, this);
        this.buttonExecute.on('click', this.execute, this);
        this.buttonPropertyAdd.on('click', this.propertyAdd, this);
        this.buttonPropertyRemove.on('click', this.propertyRemove, this);
    },
    
    setAsteriskManager: function(asteriskManager){
        this.asteriskManager = asteriskManager;
        this.startup();
    },    
    
    startup: function(){
        // Lade mögliche Aktionen in ComboBox
        var commands = this.asteriskManager.commander.getActions();
        var commandsArray = new Array();
        
        for(var cmd in commands){
            commandsArray.push([cmd, '']);
        }
        
        this.actionCombo.getStore().loadData(commandsArray);
    },
    
    selectAction: function(combo, record, index){
        // Lade Beschreibung der Aktion
        var description = record.get('description');
        this.actionDescription.setValue(description);
        // Lade mögliche Properties in PropertyGrid
        /*var properties = this.asteriskManager.actionCollection.getCommandProperties(record.get('action'), function(properties){
            this.paramsGrid.getStore().loadData(properties);
        }, this);*/
        
    },
    
    execute: function(){
        // Hole Action
        var actionName = this.actionCombo.getValue();
        
        // Hole Parameter
        var params = this.extractRecordData(this.paramsGrid.getStore().getRange());
        
        var action = new Action(this.asteriskManager);
        action.name = actionName;
        action.params = params;
        
        // Starte Command!
        this.resultArea.update("Starte Abfrage ...");
        action.execute(this.printResult, this);
    },

    extractRecordData: function(records){
        var result = new Object();
        for(var i = 0; i < records.length; i++){
            var prop = records[i].data.property;
            var val = records[i].data.defaultvalue;
            result[prop] = val;
        }
        return result;
    }, 

    printResult: function(response){
        var head = this.parseResponse([{name: 'head', content: response.head}]);
        var body = this.parseResponse(response.body);
        var foot = this.parseResponse([response.foot]);
        this.resultArea.update(head + "<hr/>" + body + "<hr/>" + foot);
    },   
    
    parseResponse: function(response){
        var htmlOutput = "";
        for(var itemKey in response){
            if(!response[itemKey] || itemKey == "remove")
                continue;
            
            var responseItem = response[itemKey];
            var itemStr = itemKey + ": <br/>" +
                "<table width=\"100%\">";
            itemStr += "<tr><td width=\"30%\" valign=\"top\"><b>"+responseItem.name+":</b></td><td width=\"70%\"  valign=\"top\">";
            for(var contentKey in responseItem.content){
                var content = responseItem.content[contentKey];
                itemStr +=  contentKey + ": " + content + "<br/>";
            }
            itemStr += "</td></tr></table>";
            htmlOutput += "<div style=\"margin: 5px; padding: 5px; border: solid 1px silver;\">" + itemStr + "</div>"
        }        
        return htmlOutput;
    },

    propertyAdd: function(){
        var recordType = this.paramsGrid.getStore().recordType;
        var record = new recordType({
            property: '',
            defaultvalue: ''
        });
        this.paramsGrid.stopEditing();
        this.paramsGrid.store.insert(0, record);
        this.paramsGrid.startEditing(0, 1);        
    },
    
    propertyRemove: function(){
        var sm = this.paramsGrid.getSelectionModel();
        var selected = sm.getSelectedCell();
        if(!selected)
            return;
        var record = this.paramsGrid.getStore().getAt(selected[0]);
        if (!record)
            return;
        this.paramsGrid.store.remove(record);
    }
});
